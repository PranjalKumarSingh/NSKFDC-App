dataImport:
 downloadMasterSheet: >
  select trainingPartnerName,sectorSkillCouncil,jobRole,nsdcRegNumber,batchId from batchdetails join trainingpartnerdetails on trainingpartnerdetails.userEmail=batchdetails.userEmail where batchId= :batchId;
 
 candidateSheet: >
  select candidate.enrollmentNumber, salutation, firstName, lastName, gender, mobileNumber, educationLevel, state, district, aadharCardNumber, idProofType, idProofNumber, disabilityType, age, dob, guardianType, firstNameFather, lastNameFather, motherName, residentialAddress, msId, occupationType, employmentType, workplaceAddress, assessmentResult, medicalExamConducted, relationWithSKMS, accountNumber, ifscCode, bankName from candidate join bankdetails on candidate.enrollmentNumber=bankdetails.enrollmentNumber where batchId= :batchId;
 
 ShowTotalTargets: >
  select targets from trainingpartnerdetails where (userEmail=:userEmail) and (targetApprovalDate between :date1 and :date2);
  
 ShowTargetAchieved: >
  select count(*) from candidate join batchdetails on candidate.batchId=batchdetails.batchId join trainingpartnerdetails on batchdetails.userEmail=trainingpartnerdetails.userEmail where (batchdetails.userEmail= :userEmail) and (batchdetails.batchEndDate<curdate()) and (batchdetails.batchendDate between :date1 and :date2);

 
 
 ShowFinancialYear: >
  SELECT
   CASE WHEN MONTH(curdate())>=4 THEN
          concat(YEAR(curdate()),YEAR(curdate())+1)
   ELSE concat(YEAR(curdate())-1,YEAR(curdate())) END AS financial_year;

 BatchDetails: >
  SELECT DISTINCT c.centreId, c.centreState, c.centreCity, b.batchId, b.municipality, b.selectionCommitteeDate, b.principalTrainerName, b.batchStartDate, b.batchEndDate,b.assessmentDate, b.medicalExamDate, b.wardType, b.wardNumber , e.employerName, e.employerContactNumber from centredetails  c  INNER JOIN batchdetails  b LEFT JOIN employerdetails e ON (b.batchId= e.batch_id and b.userEmail=e.user_email) where  b.batchId= :batchId and b.userEmail= :userEmail and (b.userEmail = c.userEmail and b.centreId = c.centreId);

 generateBatch: >
  insert into batchdetails(userEmail) values (:userEmail);

 showbatchId: >
  SELECT distinct batchId FROM batchdetails JOIN user WHERE batchdetails.userEmail= :userEmail;

 checkCentreExistence: >
  SELECT EXISTS(SELECT 1 FROM centredetails WHERE centreId = :centreId);

 insertCentreDetails: >
  insert into centredetails(centreId,centreState,centreCity,userEmail) values(:centreId,:state,:city,:userEmail);

 updateCentreDetails: >
  UPDATE centredetails set centreState=:state, centreCity=:city where centreId=:centreId;

 updateBatchDetails: >
  UPDATE batchdetails set batchStartDate=:batchStartDate,batchEndDate=:batchEndDate,assessmentDate=:assessmentDate,medicalExamDate=:medicalExamDate,selectionCommitteeDate=:selectionCommitteeDate,municipality=:municipality,wardType=:wardType,wardNumber=:wardNumber,principalTrainerName=:trainerName,centreId=:centreId where batchId=:batchId;

 importCandidate: >
  INSERT INTO nskfdc.candidate (enrollmentNumber, salutation, firstName, lastName, gender, mobileNumber, educationLevel, state, district, aadharCardNumber,idProofType, idProofNumber, disabilityType, age, dob, guardianType, firstNameFather, lastNameFather, motherName, residentialAddress, msId, occupationType,employmentType, workplaceAddress, assessmentResult, medicalExamConducted, batchId, relationWithSKMS) VALUES(:enrollmentNumber,:salutation,:firstName,:lastName,:gender,:mobileNumber,:educationLevel,:state,:district ,:aadharCardNumber,:idProofType,:idProofNumber,:disabilityType ,:age,:dob,:guardianType,:firstNameFather,:lastNameFather,:motherName,:residentialAddress,:msId,:occupationType,:employmentType,:workplaceAddress,:assessmentResult,:medicalExaminationConducted,:batchId,:relationWithSKMS);
  
 importBankDetails: >
  INSERT INTO nskfdc.bankDetails (accountNumber, ifscCode, bankName, enrollmentNumber) VALUES (:accountNumber,:ifscCode,:bankName,:enrollmentNumber);
   
 checkCandidateExistance: >
  SELECT EXISTS(SELECT 1 FROM candidate WHERE candidate.enrollmentNumber = :enrollmentNumber);  
  
 checkBankExistence: >
  SELECT EXISTS(SELECT 1 FROM bankdetails WHERE bankdetails.accountNumber = :accountNumber);
  
 updateExistingDetails: >
  UPDATE nskfdc.candidate set salutation =:salutation,firstName =:firstName,lastName =:lastName,gender =:gender,mobileNumber=:mobileNumber,educationLevel=:educationLevel,state=:state,district=:district,aadharCardNumber=:aadharCardNumber,idProofType=:idProofType,idProofNumber=:idProofNumber,disabilityType=:disabilityType,age=:age,dob=:dob,guardianType=:guardianType,firstNameFather=:firstNameFather,lastNameFather=:lastNameFather,motherName=:motherName,residentialAddress=:residentialAddress,msId=:msId,occupationType=:occupationType,employmentType=:employmentType,workplaceAddress=:workplaceAddress,assessmentResult=:assessmentResult,medicalExamConducted=:medicalExaminationConducted,relationWithSKMS=:relationWithSKMS,batchId=:batchId where enrollmentNumber =:enrollmentNumber;
  
 updateExistingBankDetails: >
  UPDATE nskfdc.bankdetails set ifscCode=:ifscCode,bankName=:bankName,enrollmentNumber =:enrollmentNumber where accountNumber=:accountNumber;
  